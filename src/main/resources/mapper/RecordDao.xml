<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cxyz.check.dao.RecordDao">

    <resultMap id="CheckHistoryDtoMap" type="CheckHistoryDto" autoMapping="true">
        <id column="id" property="id" />
        <association property="checkerName" column="{id=checker.id,type=checker.type}" javaType="String" select="com.cxyz.check.dao.UserDao.getName" />
        <collection property="results" ofType="ResultCustom">
            <result property="resultType" column="results.resultType" />
            <result property="count" column="results.count" />
        </collection>
    </resultMap>

    <select id="getMyHistory" resultType="MyHistoryDto">
        SELECT
        t.name 'subject',
        c.id 'compId',
        r.result,
        r.des,
        c.update_time 'time'
        FROM taskinfo t,tb_completion c,tb_record r
        WHERE t.id=c.`taskinfo.id`
        AND c.id=r.`completion.id`
        <if test="result!=null">
            AND r.result=#{result}
        </if>
        AND r.`stu.id` = #{id}
        ORDER BY r.id DESC
        LIMIT #{start},#{len}
    </select>

    <select id="getRecordStatistic" resultType="ResultCustom" >
      select
      r.result 'resultType',
      count(*) 'count'
      from tb_record r
      where r.`stu.id`=#{id}
      GROUP BY r.id DESC
    </select>

    <select id="getRecordsByCompId" resultType="CheckRecord">
        SELECT *
        FROM tb_record
        WHERE `completion.id`=#{compId}
    </select>

    <!--批处理添加纪录到tb_record表中-->
    <insert id="addRecords" >
        insert into tb_record(`completion.id`,`stu.id`,des,result)
        values
        <foreach collection="stuInfo" item="item" close=";" separator=",">
            (#{id},#{item.id},#{item.des},#{item.result})
        </foreach>
    </insert>

    <delete id="removeRecords" >
        DELETE FROM tb_record WHERE `completion.id`=#{id} AND `stu.id` IN
        <foreach collection="stuInfo" item="item" close=");" separator="," open="(">
            #{item.stu.id}
        </foreach>
    </delete>

    <insert id="addOtherState">
        insert into tb_otherstate(`completion.id`,des)
        VALUES (#{id},#{des});
    </insert>

    <select id="getHistory" resultMap="CheckHistoryDtoMap" >
     SELECT
     s.id,
     s.name 'lessonName',
     s.start,
     s.end,
     s.date,
     s.state,
     m.name 'roomName',
     s.update_time 'commitTime',
     r.result 'results.resultType',
     #{id} as 'checker.id',
     #{type} as 'checker.type',
     count(*) 'results.count'
     FROM tb_record r RIGHT JOIN (SELECT c.id,t.name,c.state,c.update_time,
     t.`room.id`,c.date,m1.session 'start',m2.session 'end' FROM
     tb_completion c,taskinfo t,tb_times m1,tb_times m2
     WHERE t.`checker.id`=#{id}
     AND t.start = m1.id
     AND t.end = m2.id
     AND t.`checker.type`=#{type}
     AND t.id = c.`taskinfo.id`
     AND c.state != 0
     ORDER BY c.update_time DESC limit #{start},#{len}) s on s.id = r.`completion.id` LEFT JOIN tb_room m on s.`room.id`=r.id
     GROUP BY s.id,s.name,s.state,r.result,s.update_time,m.name
    </select>


    <select id="getAlterRecords" resultType="AlterRecordDto" >
        SELECT s.id 'stu.id',
        s.name 'stu.name',
        s.photo 'stu.photo',
        r.result,r.des
        FROM
        (SELECT id,name,photo FROM tb_stu WHERE `grade.id`=#{gradeId}) s
        LEFT JOIN
        tb_record r ON r.`stu.id`=s.id
        WHERE (r.`completion.id` IS NULL OR r.`completion.id`=#{compId})
        AND EXISTS (SELECT * FROM tb_completion WHERE id=#{compId} AND state=1)
        ORDER BY s.id
    </select>

    <select id="getAlterRecord" resultType="CheckRecord">
        SELECT
        id,
        `stu.id`,
        des,
        result
        FROM tb_record
        WHERE `completion.id`=#{compId}
        AND `stu.id`=#{stuId}
    </select>

    <update id="updateRecord" parameterType="AlterRecordDto">
        UPDATE
        tb_record
        SET result=#{alter.result},des=#{alter.des}
        WHERE  `stu.id`=#{alter.stu.id}
        AND `completion.id`=#{compId}
    </update>

    <select id="getResults" resultType="ResultCustom">
     SELECT
     r.result 'resultType',
     count(*) 'count'
     FROM tb_record r,tb_completion c,taskinfo t
     WHERE r.`completion.id`=c.id
     AND c.date&gt;=#{start}
     AND c.date&lt;=#{end}
     AND c.`taskinfo.id`=t.id
     AND c.id=r.`completion.id`
     AND t.`grade.id`=#{gradeId}
     AND c.state=1
     GROUP BY r.result
    </select>

    <select id="getStatisticRecords" resultType="StatisticRecordDto">
         SELECT
         s.id 'stu.id',
         s.name 'stu.name',
         s.photo 'stu.photo',
         r.result,
         r.des,
         c.update_time 'time',
         t.name 'subject',
         c.id 'compId'
         FROM tb_record r,tb_completion c,taskinfo t,tb_stu s
         WHERE r.`completion.id`=c.id
         AND c.date&gt;=#{start}
         AND c.date&lt;=#{end}
         AND c.`taskinfo.id`=t.id
         AND c.id=r.`completion.id`
         AND t.`grade.id`=#{gradeId}
         AND s.id=r.`stu.id`
         AND c.state=1
         AND r.result=#{resultType}
    </select>

    <select id="getLessonHistories" resultMap="CheckHistoryDtoMap">
     SELECT
     s.id,
     s.name 'lessonName',
     s.start,
     s.end,
     s.date,
     s.state,
     m.name 'roomName',
     s.update_time 'commitTime',
     r.result 'results.resultType',
     s.`checker.id`,
     s.`checker.type`,
     count(*) 'results.count'
     FROM tb_record r RIGHT JOIN (SELECT c.id,t.`checker.id`,t.`checker.type`,t.name,c.state,c.update_time,
     t.`room.id`,c.date,m1.session 'start',m2.session 'end' FROM
     tb_completion c,taskinfo t,tb_times m1,tb_times m2
     WHERE t.start = m1.id
     AND t.end = m2.id
     AND t.`lesson.id`=#{id}
     AND t.id = c.`taskinfo.id`
     AND c.state != 0
     ORDER BY c.update_time DESC limit #{start},#{len}) s on s.id = r.`completion.id` LEFT JOIN tb_room m on s.`room.id`=r.id
     GROUP BY s.id,s.name,s.state,r.result,s.update_time,m.name
    </select>


</mapper>